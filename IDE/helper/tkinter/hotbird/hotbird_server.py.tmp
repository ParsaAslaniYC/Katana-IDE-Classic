#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Feb 16, 2023 05:16:56 PM +0330  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import filedialog
from tkinter.filedialog import asksaveasfile
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import hotbird_server_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+380+106")
        top.minsize(124, 1)
        top.maxsize(1360, 745)
        top.resizable(1,  1)
        top.title("Hotbird Connected")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.top = top
        def binary_mode_send():
            filename = filedialog.askopenfilename(
            initialdir = '/',
            title="Select file",
            filetypes=(("python source file","*.py"),("all files","*.*")))
            print("Sending: ", + filename)
            #send file size as big endian 64 bit value (8 bytes)
            self.sock.sendall(os.stat(filename).st_size.tobytes(8,'big'))
            with filename as f: #open our file to read
                while True:
                    chunk = f.read(self.BUFFER_SIZE) #get next chunk
                    if not chunk: #empty chunk indicates EOF
                        break
                    self.sock.sendall(chunk) #send the chunk
        def recvice_binary():
            filename = asksaveasfile(initialfile = 'Untitled.Unformated',defaultextension=".",mode="w",filetypes=[("Python Source File","*.py"),("All Files","*.*")])
            # file size transfer copied from ShadowRanger
            # Get the expected length (eight bytes long, always)
            expected_size = b"" #buffer to read in file size
            while len(expected_size) < 8: #while buffer is smaller than 8 bytes
                more_size = conn.recv(8 - len(expected_size)) #read up to remaining bytes
                if not more_size: #nothing was read
                    raise Exception("Short file length received")
                expected_size += more_size #extend buffer
            expected_size = int.from_bytes(expected_size, 'big') #Convert to int, the expected file length
            with open(filename, 'wb') as f: #open our file to write
                while f.tell() < expected_size: #while it's smaller than our expected size
                    bytes_recvd = conn.recv() #read any available data 
                    f.write(bytes_recvd)
                self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        _style_code()
        self.dis = ttk.Button(self.top)
        self.dis.place(relx=0.017, rely=0.933, height=25, width=76)
        self.dis.configure(takefocus="")
        self.dis.configure(text='''Disconnect''')
        self.dis.configure(command=self.top.destroy)
        self.dis.configure(compound='left')
        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(relx=0.017, rely=0.022, relheight=0.856
                , relwidth=0.958)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")
        self.console = ScrolledText(self.TFrame1)
        self.console.place(relx=0.017, rely=0.338, relheight=0.403
                , relwidth=0.965)
        self.console.configure(background="white")
        self.console.configure(font="TkTextFont")
        self.console.configure(foreground="black")
        self.console.configure(highlightbackground="#d9d9d9")
        self.console.configure(highlightcolor="black")
        self.console.configure(insertbackground="black")
        self.console.configure(insertborderwidth="3")
        self.console.configure(selectbackground="#c4c4c4")
        self.console.configure(state='disabled')
        self.console.configure(selectforeground="black")
        self.console.configure(wrap="none")
        self.user_message = ttk.Entry(self.TFrame1)
        self.user_message.place(relx=0.017, rely=0.831, relheight=0.055
                , relwidth=0.967)
        self.user_message.configure(takefocus="")
        self.user_message.configure(cursor="ibeam")
        self.send = ttk.Button(self.TFrame1)
        self.send.place(relx=0.017, rely=0.909, height=25, width=76)
        self.send.configure(takefocus="")
        self.send.configure(text='''Send''')
        self.send.configure(compound='left')
        self.proj_send = ttk.Button(self.TFrame1)
        self.proj_send.place(relx=0.174, rely=0.909, height=25, width=76)
        self.proj_send.configure(takefocus="")
        self.proj_send.configure(text='''Send Project''')
        self.proj_send.configure(compound='left')
        self.about = tk.Text(self.TFrame1)
        self.about.place(relx=0.017, rely=0.052, relheight=0.244, relwidth=0.424)

        self.about.configure(background="white")
        self.about.configure(font="TkTextFont")
        self.about.configure(foreground="black")
        self.about.configure(highlightbackground="#d9d9d9")
        self.about.configure(highlightcolor="black")
        self.about.configure(insertbackground="black")
        self.about.configure(selectbackground="#c4c4c4")
        self.about.configure(selectforeground="black")
        self.about.configure(state='disabled')
        self.about.configure(wrap="word")
        self.connected_users = tk.Text(self.TFrame1)
        self.connected_users.place(relx=0.47, rely=0.052, relheight=0.244
                , relwidth=0.511)
        self.connected_users.configure(background="white")
        self.connected_users.configure(font="TkTextFont")
        self.connected_users.configure(foreground="black")
        self.connected_users.configure(highlightbackground="#d9d9d9")
        self.connected_users.configure(highlightcolor="black")
        self.connected_users.configure(insertbackground="black")
        self.connected_users.configure(selectbackground="#c4c4c4")
        self.connected_users.configure(selectforeground="black")
        self.connected_users.configure(state='disabled')
        self.connected_users.configure(wrap="word")
        self.send_file = ttk.Button(self.TFrame1)
        self.send_file.place(relx=0.33, rely=0.909, height=25, width=76)
        self.send_file.configure(takefocus="")
        self.send_file.configure(text='''Send File''')
        self.send_file.configure(compound='left')
        self.send_file.configure(command=lambda : binary_mode_send())
        self.TFrame2 = ttk.Frame(self.top)
        self.TFrame2.place(relx=0.0, rely=0.911, relheight=0.002, relwidth=1.008)

        self.TFrame2.configure(relief='groove')
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief="groove")
        self.pooch = tk.Button(self.top)
        self.pooch.place(relx=0.733, rely=0.933, height=24, width=157)
        self.pooch.configure(activebackground="beige")
        self.pooch.configure(activeforeground="black")
        self.pooch.configure(background="#d9d9d9")
        self.pooch.configure(compound='left')
        self.pooch.configure(disabledforeground="#a3a3a3")
        self.pooch.configure(foreground="#000000")
        self.pooch.configure(highlightbackground="#d9d9d9")
        self.pooch.configure(highlightcolor="black")
        self.pooch.configure(pady="0")
        self.pooch.configure(state='disabled')
        self.pooch.configure(text='''Hotbird Connected Server''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    hotbird_server_support.main()

if __name__ == '__main__':
    hotbird_server_support.main()




