#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by SEEMAN version 7.4m
#  in conjunction with Tcl version 8.6
#    May 02, 2022 12:41:45 PM PDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import widgetdemo_support

def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(widgetdemo_support.root, tearoff=0)
        Popupmenu1.configure(activebackground="beige")
        Popupmenu1.configure(disabledforeground="#b8a786")
        Popupmenu1.add_command(
                command=lambda:widgetdemo_support.on_popCopy(args[0]),
                label="Copy")
        Popupmenu1.add_separator(
)
        Popupmenu1.add_command(
                command=lambda:widgetdemo_support.on_popPaste(args[0]),
                label="Paste")
        Popupmenu1.add_separator(
)
        Popupmenu1.add_command(
                command=lambda:widgetdemo_support.on_popClear(args[0]),
                label="Clear")
        Popupmenu1.add_separator(
)
        Popupmenu1.add_command(
                command=lambda:widgetdemo_support.on_popExit(args[0]),
                label="Exit")
        Popupmenu1.add_separator(
)
        Popupmenu1.add_command(
                command=lambda :widgetdemo_support.on_popCloseMenu(args[0]),
                label="Close Menu")
        Popupmenu1.post(event.x_root, event.y_root)

class Main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40' # X11 color: #666666
        _ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
        _ana2color = 'beige' # X11 color: #f5f5dc
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1391x830+360+164")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("SEEMAN Widget Demo")
        top.configure(background="#595959")
        top.configure(highlightbackground="wheat")
        top.configure(highlightcolor="black")

        self.top = top
        self.CheckDisplay = tk.StringVar()
        self.RadioDisplay = tk.StringVar()
        self.EntryDisplay = tk.StringVar()
        self.EntryData = tk.StringVar()
        self.ListDisplay = tk.StringVar()
        self.ScaleDisplay = tk.StringVar()
        self.SpinData = tk.StringVar()
        self.SpinData.set('0.0')
        self.btnAnimateText = tk.StringVar()
        self.MessageData = tk.StringVar()
        self.TCheckDisplay = tk.StringVar()
        self.TRadioDisplay = tk.StringVar()
        self.TEntryDisplay = tk.StringVar()
        self.TEntryData = tk.StringVar()
        self.TComboDisplay = tk.StringVar()
        self.combobox = tk.StringVar()
        self.TScaleDisplay = tk.StringVar()
        self.TSpinData = tk.StringVar()
        self.TSpinData.set('1')
        self.TBtnScaleAnimateText = tk.StringVar()
        self.TProgAnimateText = tk.StringVar()
        self.ScrolledTextData = tk.StringVar()
        self.ListDisplay2 = tk.StringVar()
        self.IconName = tk.StringVar()
        self.CustomWidgetData = tk.StringVar()
        self.TimesToFlash = tk.StringVar()
        self.TimesToFlash.set('1.0')
        self.RepeatedCount = tk.StringVar()
        self.StatusTime = tk.StringVar()
        self.StatusInfo1 = tk.StringVar()
        self.StatusInfo2 = tk.StringVar()
        self.che68 = tk.IntVar()
        self.che69 = tk.IntVar()
        self.che70 = tk.IntVar()
        self.che71 = tk.IntVar()
        self.che72 = tk.IntVar()
        self.selectedButton = tk.IntVar()
        self.VScaleData = tk.DoubleVar()
        self.HScaleData = tk.DoubleVar()
        self.selectedButton2 = tk.IntVar()
        self.tch49 = tk.IntVar()
        self.tch50 = tk.IntVar()
        self.tch51 = tk.IntVar()
        self.selectedButton3 = tk.IntVar()
        self.tch47 = tk.IntVar()
        self.tch46 = tk.IntVar()
        self.TVScaleData = tk.DoubleVar()
        self.THScaleData = tk.DoubleVar()
        self.tch55 = tk.IntVar()
        self.RptDelay = tk.DoubleVar()
        self.RptInterval = tk.DoubleVar()

        self.btnExit = tk.Button(self.top)
        self.btnExit.place(x=1240, y=10, height=33, width=113)
        self.btnExit.configure(activebackground="#d9d9d9")
        self.btnExit.configure(borderwidth="2")
        self.btnExit.configure(command=widgetdemo_support.on_btnExit)
        self.btnExit.configure(compound='left')
        self.btnExit.configure(disabledforeground="#b8a786")
        self.btnExit.configure(highlightbackground="wheat")
        self.btnExit.configure(state='active')
        self.btnExit.configure(text='''Exit''')

        self.style.map('TNotebook.Tab', background =
            [('selected', _bgcolor), ('active', _tabbg1),
            ('!active', _tabbg2)], foreground =
            [('selected', _fgcolor), ('active', _tabfg1), ('!active',  _tabfg2)])
        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(x=10, y=60, height=706, width=1375)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text='''Standard Tk Widgets''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t1.configure(highlightbackground="wheat")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text='''ttk Themed Widgets''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t2.configure(highlightbackground="wheat")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(2, text='''Enhanced Widgets''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t3.configure(highlightbackground="wheat")
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(3, text='''Special Twists on Normal Widgets'''
                ,compound="left", underline='''-1''', )
        self.TNotebook1_t4.configure(highlightbackground="wheat")

        self.Labelframe1 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe1.place(x=10, y=20, height=325, width=337)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe1.configure(text='''Checkbuttons''')
        self.Labelframe1.configure(highlightbackground="wheat")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=10, y=280, height=41, width=319, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(borderwidth="2")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#b8a786")
        self.Label1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label1.configure(highlightbackground="wheat")
        self.Label1.configure(relief="groove")
        self.Label1.configure(text='''Label''')
        self.Label1.configure(textvariable=self.CheckDisplay)
        self.CheckDisplay.set('''Label''')

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1.place(x=20, y=24, height=23, width=207
                , bordermode='ignore')
        self.Checkbutton1.configure(activebackground="beige")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(command=widgetdemo_support.on_CheckClick)
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#b8a786")
        self.Checkbutton1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton1.configure(highlightbackground="wheat")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Standard Checkbutton''')
        self.Checkbutton1.configure(variable=self.che68)

        self.Checkbutton2 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton2.place(x=20, y=50, height=33, width=257
                , bordermode='ignore')
        self.Checkbutton2.configure(activebackground="beige")
        self.Checkbutton2.configure(anchor='w')
        self.Checkbutton2.configure(borderwidth="0")
        self.Checkbutton2.configure(command=widgetdemo_support.on_CheckClick)
        self.Checkbutton2.configure(compound='left')
        self.Checkbutton2.configure(disabledforeground="#b8a786")
        self.Checkbutton2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton2.configure(highlightbackground="wheat")
        self.Checkbutton2.configure(highlightthickness="0")
        photo_location = "./images/check-nu.png"
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Checkbutton2.configure(image=_img0)
        self.Checkbutton2.configure(indicatoron="0")
        self.Checkbutton2.configure(justify='left')
        photo_location = "./images/check-nc.png"
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.Checkbutton2.configure(selectimage=_img1)
        self.Checkbutton2.configure(text='''Custom Image Checkbutton''')
        self.Checkbutton2.configure(variable=self.che69)

        self.Checkbutton3 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton3.place(x=30, y=93, height=43, width=287
                , bordermode='ignore')
        self.Checkbutton3.configure(activebackground="beige")
        self.Checkbutton3.configure(anchor='w')
        self.Checkbutton3.configure(borderwidth="0")
        self.Checkbutton3.configure(command=widgetdemo_support.on_CheckClick)
        self.Checkbutton3.configure(compound='left')
        self.Checkbutton3.configure(disabledforeground="#b8a786")
        self.Checkbutton3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton3.configure(highlightbackground="wheat")
        self.Checkbutton3.configure(highlightthickness="0")
        photo_location = "./images/switchoff75.png"
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Checkbutton3.configure(image=_img2)
        self.Checkbutton3.configure(indicatoron="0")
        self.Checkbutton3.configure(justify='left')
        self.Checkbutton3.configure(offrelief="flat")
        photo_location = "./images/switchon75.png"
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Checkbutton3.configure(selectimage=_img3)
        self.Checkbutton3.configure(text='''Switch Style Checkbutton''')
        self.Checkbutton3.configure(variable=self.che70)

        self.Checkbutton4 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton4.place(x=30, y=147, height=43, width=207
                , bordermode='ignore')
        self.Checkbutton4.configure(activebackground="coral")
        self.Checkbutton4.configure(background="tomato")
        self.Checkbutton4.configure(command=widgetdemo_support.on_CheckClick)
        self.Checkbutton4.configure(compound='left')
        self.Checkbutton4.configure(disabledforeground="#b8a786")
        self.Checkbutton4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton4.configure(highlightbackground="wheat")
        self.Checkbutton4.configure(indicatoron="0")
        self.Checkbutton4.configure(justify='left')
        self.Checkbutton4.configure(selectcolor="springgreen3")
        self.Checkbutton4.configure(text='''Sticky Button''')
        self.Checkbutton4.configure(variable=self.che71)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton5.place(x=20, y=206, height=23, width=207
                , bordermode='ignore')
        self.Checkbutton5.configure(activebackground="beige")
        self.Checkbutton5.configure(anchor='w')
        self.Checkbutton5.configure(command=widgetdemo_support.on_CheckClick)
        self.Checkbutton5.configure(compound='left')
        self.Checkbutton5.configure(disabledforeground="#b8a786")
        self.Checkbutton5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton5.configure(highlightbackground="wheat")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Disabled Checkbutton''')
        self.Checkbutton5.configure(variable=self.che72)

        self.Labelframe2 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe2.place(x=349, y=20, height=325, width=337)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe2.configure(text='''Radiobuttons''')
        self.Labelframe2.configure(highlightbackground="wheat")

        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(x=10, y=280, height=41, width=319, bordermode='ignore')

        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(borderwidth="2")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#b8a786")
        self.Label2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label2.configure(highlightbackground="wheat")
        self.Label2.configure(relief="groove")
        self.Label2.configure(text='''Label''')
        self.Label2.configure(textvariable=self.RadioDisplay)
        self.RadioDisplay.set('''Label''')

        self.Radiobutton1 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton1.place(x=30, y=30, height=33, width=248
                , bordermode='ignore')
        self.Radiobutton1.configure(activebackground="beige")
        self.Radiobutton1.configure(anchor='w')
        self.Radiobutton1.configure(command=widgetdemo_support.on_Radiobutton)
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(disabledforeground="#b8a786")
        self.Radiobutton1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton1.configure(highlightbackground="wheat")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Normal Radiobutton''')
        self.Radiobutton1.configure(value='1')
        self.Radiobutton1.configure(variable=self.selectedButton)

        self.Radiobutton2 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton2.place(x=30, y=70, height=33, width=268
                , bordermode='ignore')
        self.Radiobutton2.configure(activebackground="beige")
        self.Radiobutton2.configure(anchor='w')
        self.Radiobutton2.configure(borderwidth="0")
        self.Radiobutton2.configure(command=widgetdemo_support.on_Radiobutton)
        self.Radiobutton2.configure(compound='left')
        self.Radiobutton2.configure(disabledforeground="#b8a786")
        self.Radiobutton2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton2.configure(highlightbackground="wheat")
        self.Radiobutton2.configure(highlightthickness="0")
        photo_location = "./images/RbDotUnselected20.png"
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.Radiobutton2.configure(image=_img4)
        self.Radiobutton2.configure(indicatoron="0")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(padx="4")
        photo_location = "./images/RbDotSelected20.png"
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.Radiobutton2.configure(selectimage=_img5)
        self.Radiobutton2.configure(text='''Custom Image Radiobutton 1''')
        self.Radiobutton2.configure(value='2')
        self.Radiobutton2.configure(variable=self.selectedButton)

        self.Radiobutton3 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton3.place(x=29, y=110, height=33, width=268
                , bordermode='ignore')
        self.Radiobutton3.configure(activebackground="beige")
        self.Radiobutton3.configure(anchor='w')
        self.Radiobutton3.configure(borderwidth="0")
        self.Radiobutton3.configure(command=widgetdemo_support.on_Radiobutton)
        self.Radiobutton3.configure(compound='left')
        self.Radiobutton3.configure(disabledforeground="#b8a786")
        self.Radiobutton3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton3.configure(highlightbackground="wheat")
        self.Radiobutton3.configure(highlightthickness="0")
        photo_location = "./images/radio-unchecked.png"
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.Radiobutton3.configure(image=_img6)
        self.Radiobutton3.configure(indicatoron="0")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(padx="4")
        photo_location = "./images/radio-checked.png"
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.Radiobutton3.configure(selectimage=_img7)
        self.Radiobutton3.configure(text='''Custom Image Radiobutton 2''')
        self.Radiobutton3.configure(value='3')
        self.Radiobutton3.configure(variable=self.selectedButton)

        self.Radiobutton4 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton4.place(x=30, y=150, height=33, width=268
                , bordermode='ignore')
        self.Radiobutton4.configure(activebackground="beige")
        self.Radiobutton4.configure(anchor='w')
        self.Radiobutton4.configure(borderwidth="0")
        self.Radiobutton4.configure(command=widgetdemo_support.on_Radiobutton)
        self.Radiobutton4.configure(compound='left')
        self.Radiobutton4.configure(disabledforeground="#b8a786")
        self.Radiobutton4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton4.configure(highlightbackground="wheat")
        self.Radiobutton4.configure(highlightthickness="0")
        photo_location = "./images/radio-nu.png"
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.Radiobutton4.configure(image=_img8)
        self.Radiobutton4.configure(indicatoron="0")
        self.Radiobutton4.configure(justify='left')
        self.Radiobutton4.configure(padx="4")
        photo_location = "./images/radio-nc.png"
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.Radiobutton4.configure(selectimage=_img9)
        self.Radiobutton4.configure(text='''Custom Image Radiobutton 3''')
        self.Radiobutton4.configure(value='4')
        self.Radiobutton4.configure(variable=self.selectedButton)

        self.Radiobutton5 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton5.place(x=30, y=190, height=33, width=248
                , bordermode='ignore')
        self.Radiobutton5.configure(activebackground="beige")
        self.Radiobutton5.configure(anchor='w')
        self.Radiobutton5.configure(command=widgetdemo_support.on_Radiobutton)
        self.Radiobutton5.configure(compound='left')
        self.Radiobutton5.configure(disabledforeground="#b8a786")
        self.Radiobutton5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton5.configure(highlightbackground="wheat")
        self.Radiobutton5.configure(justify='left')
        self.Radiobutton5.configure(state='disabled')
        self.Radiobutton5.configure(text='''Disabled Radiobutton''')
        self.Radiobutton5.configure(value='5')
        self.Radiobutton5.configure(variable=self.selectedButton)

        self.Labelframe3 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe3.place(x=688, y=20, height=325, width=337)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe3.configure(text='''Entry Widget''')
        self.Labelframe3.configure(highlightbackground="wheat")

        self.Label3 = tk.Label(self.Labelframe3)
        self.Label3.place(x=10, y=280, height=41, width=319, bordermode='ignore')

        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(borderwidth="2")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#b8a786")
        self.Label3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label3.configure(highlightbackground="wheat")
        self.Label3.configure(relief="groove")
        self.Label3.configure(text='''Label''')
        self.Label3.configure(textvariable=self.EntryDisplay)
        self.EntryDisplay.set('''Label''')

        self.Entry1 = tk.Entry(self.Labelframe3)
        self.Entry1.place(x=30, y=30, height=33, width=266, bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#b8a786")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(highlightbackground="wheat")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(textvariable=self.EntryData)

        self.Label6 = tk.Label(self.Labelframe3)
        self.Label6.place(x=30, y=80, height=111, width=269, bordermode='ignore')

        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(anchor='nw')
        self.Label6.configure(compound='left')
        self.Label6.configure(disabledforeground="#b8a786")
        self.Label6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label6.configure(highlightbackground="wheat")
        self.Label6.configure(takefocus="")
        self.Label6.configure(text='''Type something into the Entry Widget above and press <Return> OR Mouse Button-3 to see Context Menu''')
        self.Label6.configure(wraplength="280")

        self.Labelframe4 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe4.place(x=1027, y=20, height=325, width=337)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe4.configure(text='''Listbox Widget''')
        self.Labelframe4.configure(highlightbackground="wheat")

        self.Label4 = tk.Label(self.Labelframe4)
        self.Label4.place(x=10, y=280, height=41, width=319, bordermode='ignore')

        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(borderwidth="2")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#b8a786")
        self.Label4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label4.configure(highlightbackground="wheat")
        self.Label4.configure(relief="groove")
        self.Label4.configure(text='''Label''')
        self.Label4.configure(textvariable=self.ListDisplay)
        self.ListDisplay.set('''Label''')

        self.Listbox1 = tk.Listbox(self.Labelframe4)
        self.Listbox1.place(x=20, y=40, height=176, width=164
                , bordermode='ignore')
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#b8a786")
        self.Listbox1.configure(exportselection="0")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(highlightbackground="wheat")
        self.Listbox1.configure(selectbackground="#c4c4c4")

        self.Labelframe5 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe5.place(x=10, y=350, height=325, width=337)
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe5.configure(text='''Scales and Spinbox''')
        self.Labelframe5.configure(highlightbackground="wheat")

        self.Label5 = tk.Label(self.Labelframe5)
        self.Label5.place(x=10, y=280, height=41, width=319, bordermode='ignore')

        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(borderwidth="2")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#b8a786")
        self.Label5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label5.configure(highlightbackground="wheat")
        self.Label5.configure(relief="groove")
        self.Label5.configure(text='''Label''')
        self.Label5.configure(textvariable=self.ScaleDisplay)
        self.ScaleDisplay.set('''Label''')

        self.VScale =  tk.Scale(self.Labelframe5, from_=0.0, to=10.0, resolution=1.0)
        self.VScale.place(x=30, y=40, height=214, width=49)
        self.VScale.configure(activebackground="beige")
        self.VScale.configure(command=widgetdemo_support.on_VScale)
        self.VScale.configure(highlightbackground="wheat")
        self.VScale.configure(length="214")
        self.VScale.configure(troughcolor="#d9d9d9")
        self.VScale.configure(variable=self.VScaleData)

        self.HScale =  tk.Scale(self.Labelframe5, from_=0.0, to=10.0, resolution=1.0)
        self.HScale.place(x=90, y=40, height=72, width=204)
        self.HScale.configure(activebackground="beige")
        self.HScale.configure(command=widgetdemo_support.on_HScale)
        self.HScale.configure(highlightbackground="wheat")
        self.HScale.configure(length="204")
        self.HScale.configure(orient="horizontal")
        self.HScale.configure(tickinterval="2.0")
        self.HScale.configure(troughcolor="#d9d9d9")
        self.HScale.configure(variable=self.HScaleData)

        self.Spinbox1 = tk.Spinbox(self.Labelframe5, from_=0.0, to=10.0)
        self.Spinbox1.place(x=100, y=130, height=23, width=199
                , bordermode='ignore')
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="wheat")
        self.Spinbox1.configure(command=widgetdemo_support.on_Spin)
        self.Spinbox1.configure(disabledforeground="#b8a786")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(textvariable=self.SpinData)
        self.Spinbox1.configure(wrap="1")

        self.btnAnimate = tk.Button(self.Labelframe5)
        self.btnAnimate.place(x=110, y=190, height=33, width=143
                , bordermode='ignore')
        self.btnAnimate.configure(activebackground="beige")
        self.btnAnimate.configure(borderwidth="2")
        self.btnAnimate.configure(command=widgetdemo_support.on_ScaleAnimate)
        self.btnAnimate.configure(compound='left')
        self.btnAnimate.configure(disabledforeground="#b8a786")
        self.btnAnimate.configure(highlightbackground="wheat")
        self.btnAnimate.configure(text='''Button''')
        self.btnAnimate.configure(textvariable=self.btnAnimateText)
        self.btnAnimateText.set('''Button''')

        self.Labelframe6 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe6.place(x=349, y=350, height=325, width=337)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe6.configure(text='''Canvas Widget''')
        self.Labelframe6.configure(highlightbackground="wheat")

        self.Canvas1 = tk.Canvas(self.Labelframe6)
        self.Canvas1.place(x=5, y=20, height=291, width=321, bordermode='ignore')

        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="wheat")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")

        self.Labelframe7 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe7.place(x=688, y=350, height=325, width=337)
        self.Labelframe7.configure(relief='groove')
        self.Labelframe7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe7.configure(text='''Text Widget''')
        self.Labelframe7.configure(highlightbackground="wheat")

        self.Text1 = tk.Text(self.Labelframe7)
        self.Text1.place(x=10, y=21, height=294, width=316, bordermode='ignore')
        self.Text1.configure(background="bisque")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(highlightbackground="wheat")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Labelframe8 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe8.place(x=1027, y=350, height=325, width=337)
        self.Labelframe8.configure(relief='groove')
        self.Labelframe8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe8.configure(text='''Message Widget''')
        self.Labelframe8.configure(highlightbackground="wheat")

        self.Frame2 = tk.Frame(self.Labelframe8)
        self.Frame2.place(x=10, y=276, height=45, width=315, bordermode='ignore')

        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(highlightbackground="wheat")

        self.Radiobutton6 = tk.Radiobutton(self.Frame2)
        self.Radiobutton6.place(x=17, y=11, height=23, width=72)
        self.Radiobutton6.configure(activebackground="beige")
        self.Radiobutton6.configure(anchor='w')
        self.Radiobutton6.configure(command=widgetdemo_support.on_RadioJustify)
        self.Radiobutton6.configure(compound='left')
        self.Radiobutton6.configure(disabledforeground="#b8a786")
        self.Radiobutton6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton6.configure(highlightbackground="wheat")
        self.Radiobutton6.configure(justify='left')
        self.Radiobutton6.configure(text='''Left''')
        self.Radiobutton6.configure(value='1')
        self.Radiobutton6.configure(variable=self.selectedButton2)

        self.Radiobutton7 = tk.Radiobutton(self.Frame2)
        self.Radiobutton7.place(x=106, y=11, height=23, width=92)
        self.Radiobutton7.configure(activebackground="beige")
        self.Radiobutton7.configure(anchor='w')
        self.Radiobutton7.configure(command=widgetdemo_support.on_RadioJustify)
        self.Radiobutton7.configure(compound='left')
        self.Radiobutton7.configure(disabledforeground="#b8a786")
        self.Radiobutton7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton7.configure(highlightbackground="wheat")
        self.Radiobutton7.configure(justify='left')
        self.Radiobutton7.configure(text='''Center''')
        self.Radiobutton7.configure(value='2')
        self.Radiobutton7.configure(variable=self.selectedButton2)

        self.Radiobutton8 = tk.Radiobutton(self.Frame2)
        self.Radiobutton8.place(x=215, y=11, height=23, width=82)
        self.Radiobutton8.configure(activebackground="beige")
        self.Radiobutton8.configure(anchor='w')
        self.Radiobutton8.configure(command=widgetdemo_support.on_RadioJustify)
        self.Radiobutton8.configure(compound='left')
        self.Radiobutton8.configure(disabledforeground="#b8a786")
        self.Radiobutton8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton8.configure(highlightbackground="wheat")
        self.Radiobutton8.configure(justify='left')
        self.Radiobutton8.configure(text='''Right''')
        self.Radiobutton8.configure(value='3')
        self.Radiobutton8.configure(variable=self.selectedButton2)

        self.Message1 = tk.Message(self.Labelframe8)
        self.Message1.place(x=10, y=30, height=231, width=312
                , bordermode='ignore')
        self.Message1.configure(borderwidth="3")
        self.Message1.configure(highlightbackground="wheat")
        self.Message1.configure(padx="1")
        self.Message1.configure(pady="1")
        self.Message1.configure(relief="ridge")
        self.Message1.configure(text='''Message''')
        self.Message1.configure(textvariable=self.MessageData)
        self.MessageData.set('''Message''')
        self.Message1.configure(width=312)

        self.TLabelframe1 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe1.place(x=10, y=14, height=325, width=337)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''TCheckboxes''')

        self.TLabel1 = ttk.Label(self.TLabelframe1)
        self.TLabel1.place(x=8, y=271, height=49, width=322, bordermode='ignore')

        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel1.configure(borderwidth="2")
        self.TLabel1.configure(relief="groove")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(textvariable=self.TCheckDisplay)
        self.TCheckDisplay.set('''''')
        self.TLabel1.configure(compound='left')

        self.style.map('TCheckbutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
        self.TCheckbutton1 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton1.place(x=20, y=40, width=224, height=31
                , bordermode='ignore')
        self.TCheckbutton1.configure(variable=self.tch49)
        self.TCheckbutton1.configure(command=widgetdemo_support.on_TCheck)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Tcheck Option 1''')
        self.TCheckbutton1.configure(compound='left')

        self.TCheckbutton2 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton2.place(x=20, y=80, width=244, height=31
                , bordermode='ignore')
        self.TCheckbutton2.configure(variable=self.tch50)
        self.TCheckbutton2.configure(command=widgetdemo_support.on_TCheck)
        self.TCheckbutton2.configure(takefocus="")
        self.TCheckbutton2.configure(text='''Tcheck Option 2''')
        self.TCheckbutton2.configure(compound='left')

        self.TCheckbutton3 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton3.place(x=20, y=123, width=244, height=31
                , bordermode='ignore')
        self.TCheckbutton3.configure(variable=self.tch51)
        self.TCheckbutton3.configure(command=widgetdemo_support.on_TCheck)
        self.TCheckbutton3.configure(takefocus="")
        self.TCheckbutton3.configure(text='''Tcheck Option 3''')
        self.TCheckbutton3.configure(compound='left')

        self.TLabelframe2 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe2.place(x=348, y=14, height=325, width=337)
        self.TLabelframe2.configure(relief='')
        self.TLabelframe2.configure(text='''TRadiobuttons''')

        self.TLabel2 = ttk.Label(self.TLabelframe2)
        self.TLabel2.place(x=8, y=271, height=49, width=322, bordermode='ignore')

        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel2.configure(borderwidth="2")
        self.TLabel2.configure(relief="groove")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(textvariable=self.TRadioDisplay)
        self.TRadioDisplay.set('''''')
        self.TLabel2.configure(compound='left')

        self.style.map('TRadiobutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
        self.TRadiobutton1 = ttk.Radiobutton(self.TLabelframe2)
        self.TRadiobutton1.place(x=30, y=40, width=226, height=31
                , bordermode='ignore')
        self.TRadiobutton1.configure(variable=self.selectedButton3)
        self.TRadiobutton1.configure(command=widgetdemo_support.on_TRadio)
        self.TRadiobutton1.configure(text='''TRadio Option 1''')
        self.TRadiobutton1.configure(compound='left')

        self.TRadiobutton2 = ttk.Radiobutton(self.TLabelframe2)
        self.TRadiobutton2.place(x=30, y=80, width=206, height=31
                , bordermode='ignore')
        self.TRadiobutton2.configure(variable=self.selectedButton3)
        self.TRadiobutton2.configure(value='2')
        self.TRadiobutton2.configure(command=widgetdemo_support.on_TRadio)
        self.TRadiobutton2.configure(text='''TRadio Option 2''')
        self.TRadiobutton2.configure(compound='left')

        self.TRadiobutton3 = ttk.Radiobutton(self.TLabelframe2)
        self.TRadiobutton3.place(x=30, y=120, width=226, height=31
                , bordermode='ignore')
        self.TRadiobutton3.configure(variable=self.selectedButton3)
        self.TRadiobutton3.configure(value='3')
        self.TRadiobutton3.configure(command=widgetdemo_support.on_TRadio)
        self.TRadiobutton3.configure(text='''TRadio Option 3''')
        self.TRadiobutton3.configure(compound='left')

        self.TLabelframe3 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe3.place(x=686, y=14, height=325, width=337)
        self.TLabelframe3.configure(relief='')
        self.TLabelframe3.configure(text='''TEntry Widget''')

        self.TLabel3 = ttk.Label(self.TLabelframe3)
        self.TLabel3.place(x=8, y=271, height=49, width=322, bordermode='ignore')

        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel3.configure(borderwidth="2")
        self.TLabel3.configure(relief="groove")
        self.TLabel3.configure(anchor='center')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(textvariable=self.TEntryDisplay)
        self.TEntryDisplay.set('''''')
        self.TLabel3.configure(compound='left')

        self.TEntry1 = ttk.Entry(self.TLabelframe3)
        self.TEntry1.place(x=36, y=40, height=31, width=264, bordermode='ignore')

        self.TEntry1.configure(textvariable=self.TEntryData)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")

        self.TLabel6 = ttk.Label(self.TLabelframe3)
        self.TLabel6.place(x=40, y=90, height=149, width=262
                , bordermode='ignore')
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='nw')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(wraplength="280")
        self.TLabel6.configure(text='''Type something into the Entry Widget above and press <Return> OR Mouse Button-3 to see Context Menu''')
        self.TLabel6.configure(compound='left')

        self.TLabelframe4 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe4.place(x=1024, y=14, height=325, width=337)
        self.TLabelframe4.configure(relief='')
        self.TLabelframe4.configure(text='''TCombobox''')

        self.TLabel4 = ttk.Label(self.TLabelframe4)
        self.TLabel4.place(x=8, y=271, height=49, width=322, bordermode='ignore')

        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel4.configure(borderwidth="2")
        self.TLabel4.configure(relief="groove")
        self.TLabel4.configure(anchor='center')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(textvariable=self.TComboDisplay)
        self.TComboDisplay.set('''''')
        self.TLabel4.configure(compound='left')

        self.TCombobox1 = ttk.Combobox(self.TLabelframe4)
        self.TCombobox1.place(x=80, y=53, height=21, width=177
                , bordermode='ignore')
        self.TCombobox1.configure(exportselection="0")
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")

        self.TLabel11 = ttk.Label(self.TLabelframe4)
        self.TLabel11.place(x=62, y=24, height=19, width=212
                , bordermode='ignore')
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='w')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Select Style/Theme to use:''')
        self.TLabel11.configure(compound='left')

        self.TCheckbutton5 = ttk.Checkbutton(self.TLabelframe4)
        self.TCheckbutton5.place(x=30, y=100, width=234, height=41
                , bordermode='ignore')
        self.TCheckbutton5.configure(variable=self.tch47)
        self.TCheckbutton5.configure(command=widgetdemo_support.on_FixLabelBackgrounds)
        self.TCheckbutton5.configure(takefocus="")
        self.TCheckbutton5.configure(text='''Fix Label Backgrounds''')
        self.TCheckbutton5.configure(compound='left')

        self.TCheckbutton6 = ttk.Checkbutton(self.TLabelframe4)
        self.TCheckbutton6.place(x=30, y=142, width=244, height=41
                , bordermode='ignore')
        self.TCheckbutton6.configure(variable=self.tch46)
        self.TCheckbutton6.configure(command=widgetdemo_support.on_TChkForceBorders)
        self.TCheckbutton6.configure(takefocus="")
        self.TCheckbutton6.configure(text='''Force TLabelframe borders on''')
        self.TCheckbutton6.configure(compound='left')

        self.TLabel12 = ttk.Label(self.TLabelframe4)
        self.TLabel12.place(x=30, y=200, height=39, width=282
                , bordermode='ignore')
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(font="-family {DejaVu Sans} -size 11 -weight bold -slant italic")
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(anchor='w')
        self.TLabel12.configure(justify='center')
        self.TLabel12.configure(wraplength="270")
        self.TLabel12.configure(text='''See the README for information on these options''')
        self.TLabel12.configure(compound='left')

        self.TLabelframe5 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe5.place(x=10, y=347, height=325, width=337)
        self.TLabelframe5.configure(relief='')
        self.TLabelframe5.configure(text='''TScales & TSpinbox''')

        self.TLabel5 = ttk.Label(self.TLabelframe5)
        self.TLabel5.place(x=9, y=270, height=49, width=322, bordermode='ignore')

        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel5.configure(borderwidth="2")
        self.TLabel5.configure(relief="groove")
        self.TLabel5.configure(anchor='center')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(textvariable=self.TScaleDisplay)
        self.TScaleDisplay.set('''''')
        self.TLabel5.configure(compound='left')

        self.TVScale1 = ttk.Scale(self.TLabelframe5, from_=0, to=10.0)
        self.TVScale1.place(x=30, y=30, height=210, width=17)
        self.TVScale1.configure(command=widgetdemo_support.on_TVScale)
        self.TVScale1.configure(variable=self.TVScaleData)
        self.TVScale1.configure(orient="vertical")
        self.TVScale1.configure(length="210")
        self.TVScale1.configure(takefocus="")

        self.THScale1 = ttk.Scale(self.TLabelframe5, from_=0, to=10.0)
        self.THScale1.place(x=70, y=30, height=17, width=240)
        self.THScale1.configure(command=widgetdemo_support.on_THScale)
        self.THScale1.configure(variable=self.THScaleData)
        self.THScale1.configure(length="240")
        self.THScale1.configure(takefocus="")

        self.TSpinbox1 = ttk.Spinbox(self.TLabelframe5, from_=1, to=10)
        self.TSpinbox1.place(x=80, y=70, height=20, width=205
                , bordermode='ignore')
        self.TSpinbox1.configure(command=widgetdemo_support.on_TSpin)
        self.TSpinbox1.configure(wrap="1")
        self.TSpinbox1.configure(textvariable=self.TSpinData)
        self.TSpinData.set('''TSpinData''')
        self.TSpinbox1.configure(background="white")
        self.TSpinbox1.configure(takefocus="")

        self.TBtnScaleAnimate = ttk.Button(self.TLabelframe5)
        self.TBtnScaleAnimate.place(x=100, y=130, height=48, width=143
                , bordermode='ignore')
        self.TBtnScaleAnimate.configure(command=widgetdemo_support.on_TbtnScaleAnimate)
        self.TBtnScaleAnimate.configure(takefocus="")
        self.TBtnScaleAnimate.configure(textvariable=self.TBtnScaleAnimateText)
        self.TBtnScaleAnimateText.set('''''')
        self.TBtnScaleAnimate.configure(compound='left')

        self.TLabelframe6 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe6.place(x=348, y=347, height=325, width=337)
        self.TLabelframe6.configure(relief='')
        self.TLabelframe6.configure(text='''TProgressbar''')

        self.TProgressbar1 = ttk.Progressbar(self.TLabelframe6)
        self.TProgressbar1.place(x=38, y=40, width=260, height=19
                , bordermode='ignore')
        self.TProgressbar1.configure(length="260")

        self.TCheckbutton4 = ttk.Checkbutton(self.TLabelframe6)
        self.TCheckbutton4.place(x=80, y=85, width=174, height=41
                , bordermode='ignore')
        self.TCheckbutton4.configure(variable=self.tch55)
        self.TCheckbutton4.configure(command=widgetdemo_support.on_TProgCheck)
        self.TCheckbutton4.configure(takefocus="")
        self.TCheckbutton4.configure(text='''Indeterminate Mode''')
        self.TCheckbutton4.configure(compound='left')

        self.TButton1 = ttk.Button(self.TLabelframe6)
        self.TButton1.place(x=80, y=150, height=58, width=163
                , bordermode='ignore')
        self.TButton1.configure(command=widgetdemo_support.on_TProgAnimate)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(textvariable=self.TProgAnimateText)
        self.TProgAnimateText.set('''''')
        self.TButton1.configure(compound='left')

        self.TLabelframe8 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe8.place(x=686, y=347, height=325, width=670)
        self.TLabelframe8.configure(relief='')
        self.TLabelframe8.configure(text='''TPanedwindows''')

        self.TPanedwindow1 = ttk.Panedwindow(self.TLabelframe8
                , orient="horizontal")
        self.TPanedwindow1.place(x=16, y=23, height=290, width=625
                , bordermode='ignore')
        self.TPanedwindow1_p1 = ttk.Labelframe(self.TPanedwindow1, width=75
                , text='')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)
        self.TPanedwindow1_p2 = ttk.Labelframe(self.TPanedwindow1, text='')
        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TLabel7 = ttk.Label(self.TPanedwindow1_p1)
        self.TLabel7.place(x=20, y=80, height=19, width=142, bordermode='ignore')

        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='center')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''Pane 1 - Panel 1''')
        self.TLabel7.configure(compound='left')

        self.TLabel8 = ttk.Label(self.TPanedwindow1_p2)
        self.TLabel8.place(x=120, y=20, height=19, width=172
                , bordermode='ignore')
        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='center')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''Pane 1 - Panel 2''')
        self.TLabel8.configure(compound='left')

        self.TPanedwindow2 = ttk.Panedwindow(self.TPanedwindow1_p2
                , orient="vertical")
        self.TPanedwindow2.place(x=10, y=40, height=235, width=420
                , bordermode='ignore')
        self.TPanedwindow2_p1 = ttk.Labelframe(self.TPanedwindow2, height=75
                , text='')
        self.TPanedwindow2.add(self.TPanedwindow2_p1, weight=0)
        self.TPanedwindow2_p2 = ttk.Labelframe(self.TPanedwindow2, text='')
        self.TPanedwindow2.add(self.TPanedwindow2_p2, weight=0)
        self.__funcid1 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash1)

        self.TLabel9 = ttk.Label(self.TPanedwindow2_p1)
        self.TLabel9.place(x=110, y=30, height=19, width=172
                , bordermode='ignore')
        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='center')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Pane 2 - Panel 1''')
        self.TLabel9.configure(compound='left')

        self.TLabel10 = ttk.Label(self.TPanedwindow2_p2)
        self.TLabel10.place(x=110, y=70, height=19, width=172
                , bordermode='ignore')
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='center')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Pane 2 - Panel 2''')
        self.TLabel10.configure(compound='left')

        self.Labelframe9 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe9.place(x=10, y=10, height=325, width=337)
        self.Labelframe9.configure(relief='groove')
        self.Labelframe9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe9.configure(text='''ScrolledEntry''')
        self.Labelframe9.configure(highlightbackground="wheat")

        self.Scrolledentry1 = ScrolledEntry(self.Labelframe9)
        self.Scrolledentry1.place(x=10, y=30, height=65, width=306
                , bordermode='ignore')
        self.Scrolledentry1.configure(background="white")
        self.Scrolledentry1.configure(disabledforeground="#b8a786")
        self.Scrolledentry1.configure(insertborderwidth="1")
        self.Scrolledentry1.configure(selectbackground="#c4c4c4")
        self.Scrolledentry1.configure(textvariable=self.ScrolledTextData)
        self.ScrolledTextData.set('''ScrolledTextData''')

        self.Labelframe10 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe10.place(x=350, y=10, height=325, width=337)
        self.Labelframe10.configure(relief='groove')
        self.Labelframe10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe10.configure(text='''ScrolledListbox''')
        self.Labelframe10.configure(highlightbackground="wheat")

        self.Scrolledlistbox1 = ScrolledListBox(self.Labelframe10)
        self.Scrolledlistbox1.place(x=10, y=20, height=188, width=306
                , bordermode='ignore')
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(disabledforeground="#b8a786")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightbackground="wheat")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")

        self.Label4_1 = tk.Label(self.Labelframe10)
        self.Label4_1.place(x=10, y=280, height=41, width=319
                , bordermode='ignore')
        self.Label4_1.configure(activebackground="#f9f9f9")
        self.Label4_1.configure(borderwidth="2")
        self.Label4_1.configure(compound='left')
        self.Label4_1.configure(disabledforeground="#b8a786")
        self.Label4_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label4_1.configure(highlightbackground="wheat")
        self.Label4_1.configure(relief="groove")
        self.Label4_1.configure(text='''Label''')
        self.Label4_1.configure(textvariable=self.ListDisplay2)
        self.ListDisplay2.set('''Label''')

        self.Labelframe11 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe11.place(x=690, y=10, height=325, width=337)
        self.Labelframe11.configure(relief='groove')
        self.Labelframe11.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe11.configure(text='''ScrolledSpinbox''')
        self.Labelframe11.configure(highlightbackground="wheat")

        self.Scrolledspinbox1 = ScrolledSpinbox(self.Labelframe11, from_=1.0, to=100.0)
        self.Scrolledspinbox1.place(x=20, y=50, height=35, width=288
                , bordermode='ignore')
        self.Scrolledspinbox1.configure(activebackground="#f9f9f9")
        self.Scrolledspinbox1.configure(background="white")
        self.Scrolledspinbox1.configure(disabledforeground="#b8a786")
        self.Scrolledspinbox1.configure(insertborderwidth="1")
        self.Scrolledspinbox1.configure(selectbackground="#c4c4c4")
        self.value_list = ['A Very long line to test the scrolledSpinBox','Another long line, but not as long',]
        self.Scrolledspinbox1.configure(values=self.value_list)

        self.Labelframe12 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe12.place(x=1030, y=10, height=325, width=337)
        self.Labelframe12.configure(relief='groove')
        self.Labelframe12.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe12.configure(text='''ScrolledText Widget''')
        self.Labelframe12.configure(highlightbackground="wheat")

        self.Scrolledtext1 = ScrolledText(self.Labelframe12)
        self.Scrolledtext1.place(x=20, y=30, height=281, width=302
                , bordermode='ignore')
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(wrap="none")

        self.Labelframe13 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe13.place(x=11, y=346, height=325, width=337)
        self.Labelframe13.configure(relief='groove')
        self.Labelframe13.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe13.configure(text='''ScrolledTreeview''')
        self.Labelframe13.configure(highlightbackground="wheat")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.Labelframe13)
        self.Scrolledtreeview1.place(x=20, y=60, height=241, width=300
                , bordermode='ignore')
        self.Scrolledtreeview1.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="143")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="143")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.Labelframe14 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe14.place(x=350, y=346, height=325, width=337)
        self.Labelframe14.configure(relief='groove')
        self.Labelframe14.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe14.configure(text='''ScrolledWindow''')
        self.Labelframe14.configure(highlightbackground="wheat")

        self.Scrolledwindow1 = ScrolledWindow(self.Labelframe14)
        self.Scrolledwindow1.place(x=10, y=30, height=275, width=157
                , bordermode='ignore')
        self.Scrolledwindow1.configure(background="white")
        self.Scrolledwindow1.configure(borderwidth="2")
        self.Scrolledwindow1.configure(highlightbackground="wheat")
        self.Scrolledwindow1.configure(relief="groove")
        self.Scrolledwindow1.configure(selectbackground="#c4c4c4")
        self.color = self.Scrolledwindow1.cget("background")
        self.Scrolledwindow1_f = tk.Frame(self.Scrolledwindow1,
                            background=self.color)
        self.Scrolledwindow1.create_window(0, 0, anchor='nw',
                                           window=self.Scrolledwindow1_f)

        self.Label9 = tk.Label(self.Labelframe14)
        self.Label9.place(x=170, y=80, height=51, width=149, bordermode='ignore')

        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(compound='left')
        self.Label9.configure(disabledforeground="#b8a786")
        self.Label9.configure(highlightbackground="wheat")
        self.Label9.configure(text='''Label''')
        self.Label9.configure(textvariable=self.IconName)
        self.IconName.set('''Label''')
        self.Label9.configure(wraplength="175")

        self.Labelframe14_1 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe14_1.place(x=690, y=346, height=325, width=337)
        self.Labelframe14_1.configure(relief='groove')
        self.Labelframe14_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe14_1.configure(text='''Custom Widget''')
        self.Labelframe14_1.configure(highlightbackground="wheat")

        self.Message2 = tk.Message(self.Labelframe14_1)
        self.Message2.place(x=10, y=20, height=71, width=312
                , bordermode='ignore')
        self.Message2.configure(anchor='nw')
        self.Message2.configure(borderwidth="3")
        self.Message2.configure(highlightbackground="wheat")
        self.Message2.configure(padx="5")
        self.Message2.configure(pady="5")
        self.Message2.configure(relief="groove")
        self.Message2.configure(text='''Message''')
        self.Message2.configure(textvariable=self.CustomWidgetData)
        self.CustomWidgetData.set('''Message''')
        self.Message2.configure(width=312)

        self.Frame1 = tk.Frame(self.Labelframe14_1)
        self.Frame1.place(x=10, y=100, height=215, width=205
                , bordermode='ignore')
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(highlightbackground="wheat")

        self.Custom1 = widgetdemo_support.Custom(self.Frame1)
        self.Custom1.place(x=0, y=0, height=215, width=205)

        self.btnGetChecks = tk.Button(self.Labelframe14_1)
        self.btnGetChecks.place(x=220, y=100, height=33, width=103
                , bordermode='ignore')
        self.btnGetChecks.configure(activebackground="beige")
        self.btnGetChecks.configure(borderwidth="2")
        self.btnGetChecks.configure(command=widgetdemo_support.on_btnGetChecks)
        self.btnGetChecks.configure(compound='left')
        self.btnGetChecks.configure(disabledforeground="#b8a786")
        self.btnGetChecks.configure(highlightbackground="wheat")
        self.btnGetChecks.configure(text='''Get Checks''')
        self.btnGetChecks.configure(wraplength="100")

        self.btnClearChecks = tk.Button(self.Labelframe14_1)
        self.btnClearChecks.place(x=220, y=140, height=33, width=103
                , bordermode='ignore')
        self.btnClearChecks.configure(activebackground="beige")
        self.btnClearChecks.configure(borderwidth="2")
        self.btnClearChecks.configure(command=widgetdemo_support.on_btnClearChecks)
        self.btnClearChecks.configure(compound='left')
        self.btnClearChecks.configure(disabledforeground="#b8a786")
        self.btnClearChecks.configure(highlightbackground="wheat")
        self.btnClearChecks.configure(text='''Clear Checks''')

        self.Labelframe15 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe15.place(x=1030, y=346, height=325, width=340)
        self.Labelframe15.configure(relief='groove')
        self.Labelframe15.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe15.configure(text='''PNotebook Widget''')
        self.Labelframe15.configure(highlightbackground="wheat")

        global _images
        _images = (
         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                  KkoNUtRHpYYAADs= '''),
         tk.PhotoImage("img_close_white", data='''R0lGODlhDAAMAPQfAM3NzcjI
                yMbGxsLCwsDAwL29vbq6urKysrGxsa6urqmpqZ+fn56enpaWloSEhF9fX0ZGR
                j09PTMzMykpKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///yH
                5BAEKAB8ALAAAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+fkxBgPi
                BDwshCWHQfc5KkoNUtRHpYYAADs='''),
         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )
        if _bgmode == "dark":
            self.style.element_create("close", "image", "img_close_white",
               ('active', 'pressed',  'img_closepressed'),
               ('active', 'alternate', 'img_closeactive'), border=8, sticky='')
        else:
            self.style.element_create("close", "image", "img_close",
               ('active', 'pressed',  'img_closepressed'),
               ('active', 'alternate', 'img_closeactive'), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        self.style.map('ClosetabNotebook.Tab', background =
            [('selected', _bgcolor), ('active', _tabbg1),
            ('!active', _tabbg2)], foreground =
            [('selected', _fgcolor), ('active', _tabfg1), ('!active', _tabfg2)])
        PNOTEBOOK="ClosetabNotebook"
        self.PNotebook1 = ttk.Notebook(self.Labelframe15)
        self.PNotebook1.place(x=6, y=27, height=286, width=322
                , bordermode='ignore')
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(0, text='''Page 1''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t1.configure(highlightbackground="wheat")
        self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t2, padding=3)
        self.PNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t2.configure(highlightbackground="wheat")

        self.Label7 = tk.Label(self.PNotebook1_t1)
        self.Label7.place(x=40, y=130, height=21, width=249)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(compound='left')
        self.Label7.configure(disabledforeground="#b8a786")
        self.Label7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label7.configure(highlightbackground="wheat")
        self.Label7.configure(text='''This is the PNotebook Widget''')

        self.Label8 = tk.Label(self.PNotebook1_t2)
        self.Label8.place(x=20, y=120, height=21, width=289)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(compound='left')
        self.Label8.configure(disabledforeground="#b8a786")
        self.Label8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label8.configure(highlightbackground="wheat")
        self.Label8.configure(text='''There's Nothing To See Here!''')
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)

        self.Labelframe16 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe16.place(x=10, y=20, height=327, width=337)
        self.Labelframe16.configure(relief='groove')
        self.Labelframe16.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe16.configure(text='''LinkLabels''')
        self.Labelframe16.configure(highlightbackground="wheat")

        self.Label10 = tk.Label(self.Labelframe16)
        self.Label10.place(x=20, y=50, height=21, width=259, bordermode='ignore')

        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(anchor='w')
        self.Label10.configure(compound='left')
        self.Label10.configure(disabledforeground="#b8a786")
        self.Label10.configure(font="-family {DejaVu Sans} -size 10 -weight bold -underline 1")
        self.Label10.configure(foreground="blue")
        self.Label10.configure(highlightbackground="wheat")
        self.Label10.configure(text='''Full Circle Magazine''')
        self.tooltip_font = "TkDefaultFont"
        self.Label10_tooltip = \
        ToolTip(self.Label10, self.tooltip_font, '''Go to Full Circle Web Page''')

        self.Label11 = tk.Label(self.Labelframe16)
        self.Label11.place(x=20, y=93, height=21, width=259, bordermode='ignore')

        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(anchor='w')
        self.Label11.configure(compound='left')
        self.Label11.configure(disabledforeground="#b8a786")
        self.Label11.configure(font="-family {DejaVu Sans} -size 10 -weight bold -underline 1")
        self.Label11.configure(foreground="blue")
        self.Label11.configure(highlightbackground="wheat")
        self.Label11.configure(text='''SEEMAN Download on Sourceforge''')
        self.tooltip_font = "TkDefaultFont"
        self.Label11_tooltip = \
        ToolTip(self.Label11, self.tooltip_font, '''Go to the SEEMAN Download Web Site''')

        self.Label12 = tk.Label(self.Labelframe16)
        self.Label12.place(x=20, y=140, height=21, width=269
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(anchor='w')
        self.Label12.configure(compound='left')
        self.Label12.configure(disabledforeground="#b8a786")
        self.Label12.configure(font="-family {DejaVu Sans} -size 10 -weight bold -underline 1")
        self.Label12.configure(foreground="blue")
        self.Label12.configure(highlightbackground="wheat")
        self.Label12.configure(text='''TheDesignatedGeek Homepage''')
        self.tooltip_font = "TkDefaultFont"
        self.Label12_tooltip = \
        ToolTip(self.Label12, self.tooltip_font, '''Go to TheDesignated Geek's homepage''')

        self.Labelframe17 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe17.place(x=348, y=20, height=327, width=336)
        self.Labelframe17.configure(relief='groove')
        self.Labelframe17.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe17.configure(text='''Vertical Labels''')
        self.Labelframe17.configure(highlightbackground="wheat")

        self.Label13 = tk.Label(self.Labelframe17)
        self.Label13.place(x=20, y=50, height=201, width=39, bordermode='ignore')

        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(borderwidth="2")
        self.Label13.configure(compound='left')
        self.Label13.configure(disabledforeground="#b8a786")
        self.Label13.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.Label13.configure(highlightbackground="wheat")
        self.Label13.configure(relief="groove")
        self.Label13.configure(text='''Vertical''')
        self.Label13.configure(wraplength="1")

        self.Label14 = tk.Label(self.Labelframe17)
        self.Label14.place(x=70, y=120, height=91, width=249
                , bordermode='ignore')
        self.Label14.configure(activebackground="#f9f9f9")
        self.Label14.configure(anchor='nw')
        self.Label14.configure(compound='left')
        self.Label14.configure(disabledforeground="#b8a786")
        self.Label14.configure(font="-family {DejaVu Sans} -size 11 -weight bold -slant italic")
        self.Label14.configure(highlightbackground="wheat")
        self.Label14.configure(justify='left')
        self.Label14.configure(padx="5")
        self.Label14.configure(pady="5")
        self.Label14.configure(text='''Simply set the wrap length attribute to 1.  The problem is that you can't have spaces''')
        self.Label14.configure(wraplength="240")

        self.Labelframe18 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe18.place(x=685, y=20, height=327, width=336)
        self.Labelframe18.configure(relief='groove')
        self.Labelframe18.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe18.configure(text='''Flashing Button''')
        self.Labelframe18.configure(highlightbackground="wheat")

        self.Button1 = tk.Button(self.Labelframe18)
        self.Button1.place(x=76, y=140, height=43, width=183
                , bordermode='ignore')
        self.Button1.configure(activebackground="red")
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(compound='left')
        self.Button1.configure(disabledforeground="#b8a786")
        self.Button1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button1.configure(highlightbackground="wheat")
        self.Button1.configure(text='''Flashing Button''')

        self.Button2 = tk.Button(self.Labelframe18)
        self.Button2.place(x=46, y=50, height=43, width=243, bordermode='ignore')

        self.Button2.configure(activebackground="beige")
        self.Button2.configure(borderwidth="2")
        self.Button2.configure(command=widgetdemo_support.on_FlashButton)
        self.Button2.configure(compound='left')
        self.Button2.configure(disabledforeground="#b8a786")
        self.Button2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button2.configure(highlightbackground="wheat")
        self.Button2.configure(text='''Make the button flash''')

        self.Spinbox2 = tk.Spinbox(self.Labelframe18, from_=1.0, to=25.0)
        self.Spinbox2.place(x=210, y=250, height=23, width=68
                , bordermode='ignore')
        self.Spinbox2.configure(activebackground="#f9f9f9")
        self.Spinbox2.configure(background="white")
        self.Spinbox2.configure(buttonbackground="wheat")
        self.Spinbox2.configure(command=widgetdemo_support.on_FlashButtonCount)
        self.Spinbox2.configure(disabledforeground="#b8a786")
        self.Spinbox2.configure(font="TkDefaultFont")
        self.Spinbox2.configure(highlightbackground="black")
        self.Spinbox2.configure(selectbackground="#c4c4c4")
        self.Spinbox2.configure(textvariable=self.TimesToFlash)
        self.Spinbox2.configure(wrap="1")

        self.Label15 = tk.Label(self.Labelframe18)
        self.Label15.place(x=30, y=230, height=61, width=169
                , bordermode='ignore')
        self.Label15.configure(activebackground="#f9f9f9")
        self.Label15.configure(anchor='e')
        self.Label15.configure(compound='left')
        self.Label15.configure(disabledforeground="#b8a786")
        self.Label15.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Label15.configure(highlightbackground="wheat")
        self.Label15.configure(justify='right')
        self.Label15.configure(text='''Number of times to flash the button''')
        self.Label15.configure(wraplength="160")

        self.Labelframe18_1 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe18_1.place(x=1022, y=20, height=327, width=336)
        self.Labelframe18_1.configure(relief='groove')
        self.Labelframe18_1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe18_1.configure(text='''Repeating Button''')
        self.Labelframe18_1.configure(highlightbackground="wheat")

        self.Button3 = tk.Button(self.Labelframe18_1)
        self.Button3.place(x=51, y=40, height=33, width=233, bordermode='ignore')

        self.Button3.configure(activebackground="beige")
        self.Button3.configure(borderwidth="2")
        self.Button3.configure(command=widgetdemo_support.on_RepeatButton)
        self.Button3.configure(compound='left')
        self.Button3.configure(disabledforeground="#b8a786")
        self.Button3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button3.configure(highlightbackground="wheat")
        self.Button3.configure(text='''Click and Hold to Repeat''')

        self.Scale1 =  tk.Scale(self.Labelframe18_1, from_=1.0, to=1000.0, resolution=1.0)
        self.Scale1.place(x=11, y=190, height=42, width=135)
        self.Scale1.configure(activebackground="beige")
        self.Scale1.configure(command=widgetdemo_support.on_RepeatDelay)
        self.Scale1.configure(highlightbackground="wheat")
        self.Scale1.configure(length="124")
        self.Scale1.configure(orient="horizontal")
        self.Scale1.configure(troughcolor="#d9d9d9")
        self.Scale1.configure(variable=self.RptDelay)

        self.Scale2 =  tk.Scale(self.Labelframe18_1, from_=1.0, to=1000.0, resolution=1.0)
        self.Scale2.place(x=170, y=190, height=42, width=135)
        self.Scale2.configure(activebackground="beige")
        self.Scale2.configure(command=widgetdemo_support.on_RepeatInterval)
        self.Scale2.configure(highlightbackground="wheat")
        self.Scale2.configure(orient="horizontal")
        self.Scale2.configure(troughcolor="#d9d9d9")
        self.Scale2.configure(variable=self.RptInterval)

        self.Label16 = tk.Label(self.Labelframe18_1)
        self.Label16.place(x=20, y=250, height=21, width=119
                , bordermode='ignore')
        self.Label16.configure(activebackground="#f9f9f9")
        self.Label16.configure(anchor='w')
        self.Label16.configure(compound='left')
        self.Label16.configure(disabledforeground="#b8a786")
        self.Label16.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label16.configure(highlightbackground="wheat")
        self.Label16.configure(text='''Repeat Delay''')

        self.Label17 = tk.Label(self.Labelframe18_1)
        self.Label17.place(x=160, y=250, height=21, width=141
                , bordermode='ignore')
        self.Label17.configure(activebackground="#f9f9f9")
        self.Label17.configure(anchor='w')
        self.Label17.configure(compound='left')
        self.Label17.configure(disabledforeground="#b8a786")
        self.Label17.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label17.configure(highlightbackground="wheat")
        self.Label17.configure(text='''Repeat Interval''')

        self.Label18 = tk.Label(self.Labelframe18_1)
        self.Label18.place(x=180, y=100, height=31, width=119
                , bordermode='ignore')
        self.Label18.configure(activebackground="#f9f9f9")
        self.Label18.configure(anchor='w')
        self.Label18.configure(borderwidth="2")
        self.Label18.configure(compound='left')
        self.Label18.configure(disabledforeground="#b8a786")
        self.Label18.configure(highlightbackground="wheat")
        self.Label18.configure(padx="5")
        self.Label18.configure(relief="groove")
        self.Label18.configure(text='''Label''')
        self.Label18.configure(textvariable=self.RepeatedCount)
        self.RepeatedCount.set('''Label''')

        self.Label19 = tk.Label(self.Labelframe18_1)
        self.Label19.place(x=10, y=106, height=21, width=165
                , bordermode='ignore')
        self.Label19.configure(activebackground="#f9f9f9")
        self.Label19.configure(anchor='e')
        self.Label19.configure(compound='left')
        self.Label19.configure(disabledforeground="#b8a786")
        self.Label19.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label19.configure(highlightbackground="wheat")
        self.Label19.configure(text='''# of times repeated:''')

        self.frameStatus = tk.Frame(self.top)
        self.frameStatus.place(x=10, y=770, height=55, width=1375)
        self.frameStatus.configure(relief='groove')
        self.frameStatus.configure(borderwidth="2")
        self.frameStatus.configure(relief="groove")
        self.frameStatus.configure(background="#595959")
        self.frameStatus.configure(highlightbackground="wheat")

        self.lblStatusTime = tk.Label(self.frameStatus)
        self.lblStatusTime.place(x=1200, y=5, height=46, width=169)
        self.lblStatusTime.configure(activebackground="#f9f9f9")
        self.lblStatusTime.configure(background="#595959")
        self.lblStatusTime.configure(borderwidth="2")
        self.lblStatusTime.configure(compound='left')
        self.lblStatusTime.configure(disabledforeground="#b8a786")
        self.lblStatusTime.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.lblStatusTime.configure(foreground="#ffffff")
        self.lblStatusTime.configure(highlightbackground="wheat")
        self.lblStatusTime.configure(relief="sunken")
        self.lblStatusTime.configure(text='''Label''')
        self.lblStatusTime.configure(textvariable=self.StatusTime)
        self.StatusTime.set('''Label''')

        self.lblStatusInfo1 = tk.Label(self.frameStatus)
        self.lblStatusInfo1.place(x=4, y=5, height=46, width=599)
        self.lblStatusInfo1.configure(activebackground="#f9f9f9")
        self.lblStatusInfo1.configure(anchor='w')
        self.lblStatusInfo1.configure(background="#595959")
        self.lblStatusInfo1.configure(borderwidth="2")
        self.lblStatusInfo1.configure(compound='left')
        self.lblStatusInfo1.configure(disabledforeground="#b8a786")
        self.lblStatusInfo1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.lblStatusInfo1.configure(foreground="#ffffff")
        self.lblStatusInfo1.configure(highlightbackground="wheat")
        self.lblStatusInfo1.configure(padx="5")
        self.lblStatusInfo1.configure(relief="sunken")
        self.lblStatusInfo1.configure(text='''Label''')
        self.lblStatusInfo1.configure(textvariable=self.StatusInfo1)
        self.StatusInfo1.set('''Label''')

        self.lblStatusInfo2 = tk.Label(self.frameStatus)
        self.lblStatusInfo2.place(x=607, y=5, height=46, width=589)
        self.lblStatusInfo2.configure(activebackground="#f9f9f9")
        self.lblStatusInfo2.configure(anchor='w')
        self.lblStatusInfo2.configure(background="#595959")
        self.lblStatusInfo2.configure(compound='left')
        self.lblStatusInfo2.configure(disabledforeground="#b8a786")
        self.lblStatusInfo2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.lblStatusInfo2.configure(foreground="#ffffff")
        self.lblStatusInfo2.configure(highlightbackground="wheat")
        self.lblStatusInfo2.configure(padx="5")
        self.lblStatusInfo2.configure(relief="sunken")
        self.lblStatusInfo2.configure(text='''Label''')
        self.lblStatusInfo2.configure(textvariable=self.StatusInfo2)
        self.StatusInfo2.set('''Label''')

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def __adjust_sash1(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid1)
        del self.__funcid1

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except tk.TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledEntry(AutoScroll, tk.Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledSpinbox(AutoScroll, tk.Spinbox):
    '''A standard Tkinter Spinbox widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Spinbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    widgetdemo_support.main()

if __name__ == '__main__':
    widgetdemo_support.main()




